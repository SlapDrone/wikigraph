[core]
# The home folder for Airflow, default is '~/airflow'
#airflow_home = /app

# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository. This path must be absolute.
dags_folder = /app/dags

# The folder where airflow should store its log files. This path
# must be absolute. Note that this directory must be writable by
# the user account running Airflow.
base_log_folder = /app/logs

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor, DaskExecutor, KubernetesExecutor
executor = CeleryExecutor

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
sql_alchemy_conn = postgresql+psycopg2://airflow:airflow@postgres:5432/airflow

# Encoding of files containing Python code
source_code_encoding = utf-8

[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = http://localhost:8080

# The ip specified when starting the web server
web_server_host = 0.0.0.0

# The port on which to run the web server
web_server_port = 8080

# Secret key used to run your flask app. It should be as long and random
# as possible
secret_key = temporary_key

[api]
# Enable the API plugin
auth_backend = airflow.api.auth.backend.default

[celery]
# This section only applies if you are using the CeleryExecutor in
# [core] section above

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more
# information.
broker_url = redis://localhost:6379/0

# The Celery result_backend. When a job finishes, it needs to update the
# metadata of the job. Therefore it will post a message on a message bus,
# or insert it into a database (depending what you configure here)
result_backend = db+postgresql://airflow:airflow@localhost:5432/airflow

# Celery Flower is a sweet UI for Celery. Airflow has a built-in
# Flower-based monitoring solution for CeleryExecutor
flower_host = 0.0.0.0
flower_port = 5555

# ... (other settings) ...
